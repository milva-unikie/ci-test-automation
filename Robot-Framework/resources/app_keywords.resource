# SPDX-FileCopyrightText: 2022-2025 Technology Innovation Institute (TII)
# SPDX-License-Identifier: Apache-2.0

*** Settings ***
Library             ../lib/output_parser.py
Resource            ../resources/file_keywords.resource
Resource            ../resources/ssh_keywords.resource


*** Variables ***
${APP_OUTPUT_FILE}   /home/${USER_LOGIN}/output.log


*** Keywords ***

Start application in VM
    [Arguments]    ${app_name}   ${vm_name}   ${process_name}   ${exact_match}=false
    Check that appVM is running   ${vm_name}
    Switch to vm   ${GUI_VM}  user=${USER_LOGIN}
    Start application   ${app_name}
    IF   '${vm_name}' != '${GUI_VM}'   Switch to vm   ${vm_name}
    Check that the application was started    ${process_name}   exact_match=${exact_match}

Check that appVM is running
    [Arguments]    ${vm_name}
    Check if ssh is ready on vm   ${vm_name}   timeout=60
    Switch to vm      ${vm_name}
    # Wait until systemctl status is running (ignore error in case the status is degraded)
    ${status}   Run Keyword and Ignore Error    Verify Systemctl status

Start application
    [Arguments]      ${app_name}
    Execute Command  nohup sh -c 'WAYLAND_DISPLAY=wayland-1 ghaf-open ${app_name}' > ${APP_OUTPUT_FILE} 2>&1 &

Check that the application was started
    [Arguments]          ${app_name}  ${range}=2  ${exact_match}=false
    FOR   ${i}   IN RANGE  ${range}
        @{found_pids}        Find pid by name    ${app_name}  ${exact_match}
        Set Global Variable  @{APP_PIDS}  @{found_pids}
        ${status}    Run Keyword And Return Status   Should Not Be Empty  ${APP_PIDS}
        IF    ${status}    BREAK
        Sleep   1
    END
    Should Not Be Empty  ${APP_PIDS}  ${app_name} is not started
    Log To Console       ${app_name} is started

Check that the application is not running
    [Arguments]          ${app_name}  ${range}=2  ${exact_match}=false
    ${pids}=  Set Variable  ${EMPTY}
    FOR   ${i}   IN RANGE  ${range}
        ${keyword_status}  ${pids}  Run Keyword And Ignore Error   Find pid by name    ${app_name}  ${exact_match}
        Set Global Variable  @{APP_PIDS}  @{pids}
        ${status}    Run Keyword And Return Status   Should Be Empty  ${pids}
        IF    ${status}    BREAK
        Sleep   1
    END
    Should Be Empty   ${pids}   ${app_name} is still running
    Log To Console    ${app_name} not running

Launch Cosmic Term
    Start application in VM   com.system76.CosmicTerm   ${GUI_VM}   cosmic-term   exact_match=true

Log and remove app output
    [Documentation]    Specify the VM from which the app was started and the user (the owner of the file)
    [Arguments]   ${file}    ${vm}    ${user}=ghaf
    Switch to vm  ${vm}    ${user}
    ${output}     Execute Command    cat ${file}
    Log           ${output}
    Remove file   ${file}

Log app vm journalctl
    [Documentation]    Specify the VM where the App is actually running
    [Arguments]   ${vm}
    Switch to vm  ${vm}
    ${output}     Execute Command    journalctl -b
    Log           ${output}

Kill Process And Save Logs
    [Documentation]    Kill all running process and log apps output and journalctl
    ...                app_start_vm - the VM from which the app was started
    ...                user - by what user the app was started
    ...                log_file - the name of the file which was defined in the app's starting command
    ...                app_running_vm - the VM where the App is actually running
    [Arguments]        ${app_start_vm}   ${user}   ${log_file}   ${app_running_vm}=${app_start_vm}
    Switch to vm       ${app_running_vm}
    Kill process       @{APP_PIDS}
    Log and remove app output   ${log_file}  ${app_start_vm}   user=${user}
    IF  '${TEST_STATUS}'=='FAIL'   Log app vm journalctl  ${app_running_vm}

Kill App in VM
    [Arguments]   ${vm}
    Kill Process And Save Logs    ${GUI_VM}    ${USER_LOGIN}    ${APP_OUTPUT_FILE}    ${vm}

Is process started
    [Arguments]    ${pid}
    ${rc}=      Execute Command    ps -p ${pid}   return_rc=True
    ${status}=  Run Keyword And Return Status   Should Be Equal As Integers	 ${rc[1]}	0
    RETURN      ${status}

Find pid by name
    [Arguments]   ${proc_name}  ${exact_match}=false
    Log To Console    Looking for pids of the process ${proc_name}
    IF  $exact_match=='true'
        ${output}=    Execute Command    sh -c 'ps aux | grep -E " ${proc_name}$" | grep -v grep'
    ELSE
        ${output}=    Execute Command    sh -c 'ps aux | grep "${proc_name}" | grep -v grep'
    END
    Log           ${output}
    @{pids}=      Find Pid    ${output}  ${proc_name}
    Log To Console    Found PIDs for process '${proc_name}':\n${pids}
    RETURN        @{pids}

Kill process
    [Arguments]    @{pids}    ${sig}=9    ${sudo}=True
    FOR   ${pid}  IN  @{pids}
        IF  '${pid}' == '${EMPTY}'
            BREAK
        END
        IF  $sudo == "True"
            Execute Command    kill -${sig} ${pid}  sudo=True  sudo_password=${password}  timeout=15
        ELSE
            Execute Command    kill -${sig} ${pid}  timeout=15
        END
        FOR    ${i}    IN RANGE   5
            ${ps_exists}=    Is Process Started    ${pid}
            IF  ${ps_exists}
                Sleep    0.5
            ELSE
                BREAK
            END
        END
        IF  ${ps_exists}  FAIL  Process ${pid} haven't stopped
        # Check if any of the original pids are still running
        ${any_running} =    Set Variable    False
        FOR    ${check_pid}  IN  @{pids}
            ${ps_exists} =    Is Process Started    ${check_pid}
            IF  ${ps_exists}
                ${any_running} =    Set Variable    True
                BREAK
            END
        END
        IF  not ${any_running}
            BREAK
        END
    END
    Log To Console    Killed processes: @{pids}

Kill process by name
    [Arguments]     ${proc_name}   ${exact_match}=false   ${sudo}=False
    ${pass_status}   ${output}    Run Keyword And Ignore Error   Check that the application was started   ${proc_name}   1
    IF  $pass_status=='PASS'
        Log To Console   ${proc_name} is running, killing the process
        @{pid}           Find pid by name   ${proc_name}
        Kill process     @{pid}   sudo=${sudo}
    END